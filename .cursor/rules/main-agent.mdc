---
alwaysApply: true
---

# Main Agent Registry

Central coordinator for all AI agents in the SaaS Starter project.

## Core Functionality

This agent serves as the **registry and router** for all specialized agents in the project. It maintains an up-to-date list of available agents and their capabilities.

## Available Agents (Cursor Rules)

### agent-creator-expert

- **Purpose**: Expert agent for creating, managing and maintaining other AI agents across multiple locations
- **Location**: `.cursor/rules/agent-creator-expert.mdc`

### software-arquitect

- **Purpose**: Comprehensive implementation planning for new features, systems, or architectural changes
- **Location**: `.cursor/rules/software-arquitect.mdc`

### software-engineer

- **Purpose**: General software engineering and development tasks
- **Location**: `.cursor/rules/software-engineer.mdc`

### ui-tester

- **Purpose**: UI testing and quality assurance
- **Location**: `.cursor/rules/ui-tester.mdc`

### ui-ux-designer

- **Purpose**: UI/UX design and frontend development with layout architecture, shared components, and design system integration
- **Key Capabilities**: Layout selection (SectionContainer+ContentWrapper vs ContainerLayout), shared component usage (FeatureCard, IconCard, ImageSection, CTASection), mobile-first responsive design, shadcn/ui integration
- **Location**: `.cursor/rules/ui-ux-designer.mdc`

### database-optimizer

- **Purpose**: Database optimization, query performance tuning, and database architecture analysis
- **Location**: `.cursor/rules/database-optimizer.mdc`

### documentation-writer

- **Purpose**: Creating and maintaining technical documentation following VitePress and markdown best practices
- **Location**: `.cursor/rules/documentation-writer.mdc`

### image-creator-expert

- **Purpose**: Expert agent for creating high-quality images for websites and apps using fal.ai MCP tools. Specializes in Imagen 4, FLUX Pro, and FLUX Schnell models with proven workflows for hero images, team photos, and professional content.
- **Location**: `.cursor/rules/image-creator-expert.mdc`

### typescript

- **Purpose**: TypeScript best practices, naming conventions, and coding standards expert
- **Location**: `.cursor/rules/typescript.mdc`

### unit-testing

- **Purpose**: Comprehensive unit testing expert specializing in Vitest, TypeScript, and modern testing best practices
- **Location**: `.cursor/rules/unit-testing.mdc`

### pr-review-analyzer

- **Purpose**: Expert agent for analyzing GitHub PR code reviews, determining actionable items, and creating detailed fix instructions following project guidelines
- **Location**: `.cursor/rules/pr-review-analyzer.mdc`

### api-request-expert

- **Purpose**: Expert for building type-safe API requests, client hooks, server actions, and API handlers with validation and permissions
- **Location**: `.cursor/rules/api-request-expert.mdc`

## Routing Guidelines

Direct tasks to appropriate specialized agents:

- **Agent creation/management** → `agent-creator-expert`
- **Crafting Implementation Plans** → `software-arquitect`
- **Coding/development** → `software-engineer`
- **UI testing** → `ui-tester`
- **UI/UX design** → `ui-ux-designer`
- **Database optimization** → `database-optimizer`
- **Documentation** → `documentation-writer`
- **Image generation and creation** → `image-creator-expert`
- **TypeScript best practices** → `typescript`
- **Unit Testing** → `unit-testing`
- **PR Review Analysis** → `pr-review-analyzer`
- **API routes, hooks, server actions** → `api-request-expert`

## Registry Maintenance

When adding or updating agents in Cursor:

1. ✅ Create/update agent in `.cursor/rules/`
2. ✅ Update this `main-agent.mdc` file
3. ✅ Use MDC format with proper frontmatter
4. ✅ Update total agent count and last updated date

## Usage

Reference agents in requests:

```
"I'll use the [agent-name] agent to [specific task]"
```

Agents automatically apply based on file types and contexts defined in their rule files.

---

_Last updated: 2025-10-17_
_Total Cursor agents: 13 (including main-agent)_
